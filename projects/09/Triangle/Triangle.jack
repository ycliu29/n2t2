
/** Implements a graphical triangle. */
class Triangle {

    field int x, y; // screen location of the square's most center pixel
    field int length; // height of this triangle, in pixels
    field Array orientation; // in which direction should the triangle grow into, [1, -1] means growing to right and bottom of the center 

    /** Constructs a new triangle with a given center point and length. */
    constructor Triangle new(int Cx, int Cy, int Tlength) {
      var Array arr;
      let x = Cx;
      let y = Cy;
      let length = Tlength;
      
      let arr = Array.new(2);
      let arr[0] = 1; // denotes the x axis
      let arr[1] = -1; // denotes the y axis, the y axis in Screen API is reversed from common math notation 

      let orientation = arr;
      return this;
    }

    /** Draws the triangle on the screen. */
    method void draw(boolean color) {
      var int i;
      let i = 1;

      do Screen.setColor(color);
      do Screen.drawLine(x, y, x + (length * orientation[0]) , y);
      while (~(i > length))  {
        do Screen.drawLine(x, y + (i * orientation[1]), x + ((length - i) * orientation[0]), y + (i * orientation[1]));
        let i = (i + 1);
      }
      return;
   }

    /** check if action falls within usable area, 161,4 -> 507,251 */
    method boolean check(int nx, int ny, int nlength, arr norientation) {
      var int i, tipx, tipy ;
      let tipx = (nx + (nlength * norientation[0]));
      let tipy = (ny + (nlength * norientation[1]));
      if ( (nx < 508) & (nx > 160) & (ny < 252) & (ny > 3) & (tipx < 508) & (tipx > 160) & (tipy < 252) & (tipy > 3))
      {
        return true;
      }
      return false;
    }

    /** move the trinagle up */
    method void moveup() {
      var boolean checkresult;
      let checkresult = check(x, (y - 10), length, orientation);

      if (checkresult) {
        do draw(false);
        let y = (y - 10);
        do draw(true);
      }
      return;
    }

    /** move the trinagle down */
    method void movedown() {
      var boolean checkresult;
      let checkresult = check(x, (y + 10), length, orientation);

      if (checkresult) {
        do draw(false);
        let y = (y + 10);
        do draw(true);
      }
      return;
    }

    /** move the trinagle right */
    method void moveright() {
      var boolean checkresult;
      let checkresult = check((x + 10), y, length, orientation);

      if (checkresult) {
        do draw(false);
        let x = (x + 10);
        do draw(true);
      }
      return;
    }

    /** move the trinagle left */
    method void moveleft() {
      var boolean checkresult;
      let checkresult = check((x - 10), y, length, orientation);

      if (checkresult) {
        do draw(false);
        let x = (x - 10);
        do draw(true);
      }
      return;
    }

    /** increase size of the triangle. */
    method void inc() {
      var boolean checkresult;
      let checkresult = check(x, y, (length + 10), orientation);

      if (checkresult) {
        do draw(false);
        let length = length + 10;
        do draw(true);
      }
      return;
    }

    /** decrease size of the triangle. */
    method void dec() {
      var boolean checkresult;
      let checkresult = check(x, y, (length - 10), orientation);

      if (checkresult) {
        do draw(false);
        if (length > 10) {
          let length = length - 10;
        }
        do draw(true);
      }
      return;
    }

    /** turn the trinagle by 90 degrees. */
    method void turn() {
      var Array arr;
      var boolean checkresult;
      // 1,-1 -> 1,1, -1,1 -> -1,-1 ->
      
      if (orientation[0] = 1 & orientation[1] = -1) {
        let arr = orientation;
        let arr[1] = 1;
        let checkresult = check(x, y, length, arr);
        let orientation[1] = -1;

        if (checkresult) {

          do draw(false);
          let orientation[1] = 1;
          do draw(true);
        }
        return;
      }

      if (orientation[0] = 1 & orientation[1] = 1) {
        let arr = orientation;
        let arr[0] = -1;
        let checkresult = check(x, y, length, arr);
        let orientation[0] = 1;

        if (checkresult) {
          do draw(false);
          let orientation[0] = -1;
          do draw(true);
        }
        return;
      }

      if (orientation[0] = -1 & orientation[1] = 1) {
        let arr = orientation;
        let arr[1] = -1;
        let checkresult = check(x, y, length, arr);
        let orientation[1] = 1;

        if (checkresult) {
          do draw(false);
          let orientation[1] = -1;
          do draw(true);
        }
        return;
      }

      if (orientation[0] = -1 & orientation[1] = -1) {
        let arr = orientation;
        let arr[0] = 1;
        let checkresult = check(x, y, length, arr);
        let orientation[0] = -1;

        if (checkresult) {
          do draw(false);
          let orientation[0] = 1;
          do draw(true);
        }
        return;
      }
      return;
    }
}
